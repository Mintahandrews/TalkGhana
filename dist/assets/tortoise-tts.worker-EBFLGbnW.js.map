{"version":3,"file":"tortoise-tts.worker-EBFLGbnW.js","sources":["../src/workers/tortoise-tts.worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\n\nimport { GhanaianLanguage } from \"../services/LanguageService\";\n\n// Define worker context type\ndeclare const self: DedicatedWorkerGlobalScope;\n\ninterface TortoiseTTS {\n  initialize(): Promise<void>;\n  generate(\n    text: string,\n    options: any\n  ): Promise<{\n    buffer: ArrayBuffer;\n    duration: number;\n    sampleRate: number;\n  }>;\n  loadVoice(voiceId: string, language: GhanaianLanguage): Promise<void>;\n  cloneVoice(audioClips: ArrayBuffer[]): Promise<string>;\n  cleanup(): Promise<void>;\n  adaptLanguage(language: GhanaianLanguage): Promise<void>;\n}\n\ninterface WorkerMessage {\n  id: string;\n  type: \"initialize\" | \"generate\" | \"loadVoice\" | \"cloneVoice\" | \"stop\";\n  data: any;\n  config?: {\n    language?: GhanaianLanguage;\n    accentStrength?: number;\n    speakingRate?: number;\n    pitch?: number;\n  };\n}\n\ninterface WorkerResponse {\n  id: string;\n  type: string;\n  data?: any;\n  error?: string;\n}\n\nlet tts: TortoiseTTS | null = null;\nlet isInitialized = false;\nlet currentLanguage: GhanaianLanguage | null = null;\nlet isBusy = false;\n\n// Mock voices for initial development (will be replaced with real models)\nconst mockVoices: Record<string, any> = {\n  \"english-default\": { loaded: true },\n  \"twi-default\": { loaded: false },\n  \"ga-default\": { loaded: false },\n  \"ewe-default\": { loaded: false },\n  \"hausa-default\": { loaded: false },\n};\n\n// Store loaded models\nconst loadedModels: Map<string, any> = new Map();\n\n// Initialize Tortoise-TTS with enhanced error handling\nasync function initialize() {\n  try {\n    await loadTortoiseScript();\n\n    if (!(\"Tortoise\" in self)) {\n      throw new Error(\"Tortoise not loaded\");\n    }\n\n    tts = new (self as any).Tortoise({\n      modelPath: \"/models/tortoise-tts\",\n      cacheDir: \"/cache/tortoise-tts\",\n      enableNoiseReduction: true,\n    });\n\n    if (!tts) {\n      throw new Error(\"Failed to create Tortoise instance\");\n    }\n\n    await tts.initialize();\n    isInitialized = true;\n    self.postMessage({ type: \"initialized\" });\n  } catch (error) {\n    handleError(\"Initialization failed\", error);\n  }\n}\n\n// Enhanced error handling utility\nfunction handleError(context: string, error: any) {\n  console.error(`${context}:`, error);\n  self.postMessage({\n    type: \"error\",\n    data: {\n      message: `${context}: ${error.message || error}`,\n      context,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n\n// Generate speech with improved language handling\nasync function generateSpeech(text: string, config: WorkerMessage[\"config\"] = {}) {\n  if (!tts || !isInitialized) {\n    handleError(\"Generation failed\", new Error(\"Tortoise-TTS not initialized\"));\n    return;\n  }\n\n  try {\n    if (config?.language && config.language !== currentLanguage) {\n      await adaptLanguage(config.language);\n    }\n\n    const audio = await tts.generate(text, {\n      ...config,\n      enableNoiseReduction: true,\n      accentStrength: config?.accentStrength || 0.8,\n      speakingRate: config?.speakingRate || 1.0,\n      pitch: config?.pitch || 1.0,\n      languageModel: config?.language\n        ? `${config.language.toLowerCase()}_base`\n        : undefined,\n      useCustomPronunciation: true,\n    });\n\n    self.postMessage({\n      type: \"speech\",\n      data: {\n        audio: audio.buffer,\n        language: config?.language,\n        duration: audio.duration,\n        sampleRate: audio.sampleRate,\n      },\n    });\n  } catch (error) {\n    handleError(\"Speech generation failed\", error);\n  }\n}\n\n// New function to adapt to a specific language\nasync function adaptLanguage(language: GhanaianLanguage) {\n  if (!tts || !isInitialized) {\n    handleError(\n      \"Language adaptation failed\",\n      new Error(\"Tortoise-TTS not initialized\")\n    );\n    return;\n  }\n\n  try {\n    await tts.adaptLanguage(language);\n    currentLanguage = language;\n    self.postMessage({\n      type: \"language_adapted\",\n      data: { language },\n    });\n  } catch (error) {\n    handleError(\"Language adaptation failed\", error);\n  }\n}\n\n// Load a voice\nasync function loadVoice(language: string, voiceId: string) {\n  const voiceKey = `${language}-${voiceId}`;\n\n  // Check if already loaded\n  if (mockVoices[voiceKey]?.loaded) {\n    return;\n  }\n\n  // In a real implementation, this would:\n  // 1. Download or load the voice model from IndexedDB\n  // 2. Initialize the model\n\n  // For development, we'll simulate loading with a delay\n  await new Promise((resolve) => setTimeout(resolve, 300));\n\n  // Mark as loaded\n  if (!mockVoices[voiceKey]) {\n    mockVoices[voiceKey] = { loaded: true };\n  } else {\n    mockVoices[voiceKey].loaded = true;\n  }\n}\n\n// Clone a voice\nasync function cloneVoice(\n  audioClips: ArrayBuffer[],\n  language: GhanaianLanguage\n) {\n  if (!tts || !isInitialized) {\n    self.postMessage({\n      type: \"error\",\n      data: { message: \"Tortoise-TTS not initialized\" },\n    });\n    return;\n  }\n\n  try {\n    // Use language-specific voice cloning settings\n    const voiceId = await tts.cloneVoice(audioClips);\n    self.postMessage({\n      type: \"voice_cloned\",\n      data: { voiceId },\n    });\n  } catch (error) {\n    self.postMessage({\n      type: \"error\",\n      data: { message: \"Failed to clone voice\" },\n    });\n  }\n}\n\n// Setup message handler\nself.onmessage = async (event: MessageEvent<WorkerMessage>) => {\n  const { id, type, data } = event.data;\n\n  try {\n    // Process the message based on its type\n    switch (type) {\n      case \"initialize\":\n        await handleInitialize(id);\n        break;\n\n      case \"generate\":\n        await handleGenerate(id, data);\n        break;\n\n      case \"loadVoice\":\n        await handleLoadVoice(id, data);\n        break;\n\n      case \"cloneVoice\":\n        await handleCloneVoice(id, data);\n        break;\n\n      case \"stop\":\n        await handleStop(id);\n        break;\n\n      default:\n        sendError(id, `Unknown message type: ${type}`);\n    }\n  } catch (error: any) {\n    sendError(id, error.message || \"Unknown error\");\n  }\n};\n\n/**\n * Initialize the worker and load core models\n */\nasync function handleInitialize(id: string): Promise<void> {\n  if (isInitialized) {\n    sendResponse(id, \"initialize\", { success: true });\n    return;\n  }\n\n  try {\n    console.log(\"TortoiseTTS worker: Initializing...\");\n\n    // In a real implementation, this would:\n    // 1. Load the core TortoiseTTS model\n    // 2. Initialize the vocoder\n    // 3. Set up any required preprocessing\n\n    // For development, we'll simulate a delay for initialization\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    isInitialized = true;\n    sendResponse(id, \"initialize\", { success: true });\n  } catch (error: any) {\n    console.error(\"TortoiseTTS worker: Failed to initialize\", error);\n    sendError(id, `Failed to initialize: ${error.message}`);\n  }\n}\n\n/**\n * Generate speech from text\n */\nasync function handleGenerate(id: string, data: any): Promise<void> {\n  if (!isInitialized) {\n    sendError(id, \"Worker not initialized\");\n    return;\n  }\n\n  if (isBusy) {\n    sendError(id, \"Worker is busy\");\n    return;\n  }\n\n  try {\n    isBusy = true;\n    const { text, voiceKey, config } = data;\n\n    console.log(\n      `TortoiseTTS worker: Generating speech for \"${text}\" using ${voiceKey}`\n    );\n\n    // Check if voice is loaded\n    if (!mockVoices[voiceKey] || !mockVoices[voiceKey].loaded) {\n      // Try to load the voice\n      await loadVoice(voiceKey.split(\"-\")[0], voiceKey.split(\"-\")[1]);\n    }\n\n    // In a real implementation, this would:\n    // 1. Preprocess the text (phonemization, etc.)\n    // 2. Generate mel spectrograms using the TortoiseTTS model\n    // 3. Convert spectrograms to audio using the vocoder\n    // 4. Post-process the audio\n\n    // For development, we'll generate a simple tone based on text length\n    const audioData = generateMockAudio(text, config);\n\n    sendResponse(id, \"generate\", audioData);\n  } catch (error: any) {\n    console.error(\"TortoiseTTS worker: Failed to generate speech\", error);\n    sendError(id, `Failed to generate speech: ${error.message}`);\n  } finally {\n    isBusy = false;\n  }\n}\n\n/**\n * Load a voice model\n */\nasync function handleLoadVoice(id: string, data: any): Promise<void> {\n  const { language, voiceId } = data;\n  const voiceKey = `${language}-${voiceId}`;\n\n  try {\n    console.log(`TortoiseTTS worker: Loading voice ${voiceKey}`);\n\n    await loadVoice(language, voiceId);\n\n    sendResponse(id, \"loadVoice\", {\n      success: true,\n      voiceKey,\n    });\n  } catch (error: any) {\n    console.error(\n      `TortoiseTTS worker: Failed to load voice ${voiceKey}`,\n      error\n    );\n    sendError(id, `Failed to load voice ${voiceKey}: ${error.message}`);\n  }\n}\n\n/**\n * Clone a new voice from audio samples\n */\nasync function handleCloneVoice(id: string, data: any): Promise<void> {\n  if (!isInitialized) {\n    sendError(id, \"Worker not initialized\");\n    return;\n  }\n\n  try {\n    const { audioClips, language } = data;\n\n    console.log(\n      `TortoiseTTS worker: Cloning voice for ${language} from ${audioClips.length} clips`\n    );\n\n    // In a real implementation, this would:\n    // 1. Extract speaker embeddings from the audio clips\n    // 2. Save the embeddings for later use\n\n    // For development, we'll generate a random voice ID\n    const voiceId = `cloned-${language}-${Date.now()}`;\n    mockVoices[`${language}-${voiceId}`] = { loaded: true };\n\n    sendResponse(id, \"cloneVoice\", {\n      success: true,\n      voiceId,\n      language,\n    });\n  } catch (error: any) {\n    console.error(\"TortoiseTTS worker: Failed to clone voice\", error);\n    sendError(id, `Failed to clone voice: ${error.message}`);\n  }\n}\n\n/**\n * Stop current processing\n */\nasync function handleStop(id: string): Promise<void> {\n  console.log(\"TortoiseTTS worker: Stopping...\");\n\n  // In a real implementation, this would interrupt any ongoing processing\n\n  sendResponse(id, \"stop\", { success: true });\n}\n\n/**\n * Generate mock audio for development\n */\nfunction generateMockAudio(text: string, config: any): ArrayBuffer {\n  const sampleRate = 22050;\n  const duration = Math.min(10, Math.max(1, text.length * 0.1)); // 0.1 seconds per character\n  const numSamples = Math.floor(sampleRate * duration);\n  const buffer = new ArrayBuffer(numSamples * 2); // 16-bit samples\n  const view = new Int16Array(buffer);\n\n  // Generate a simple sine wave whose frequency depends on text content\n  // This is just for testing - real implementation would use TortoiseTTS\n  const frequency = 220 + (text.length % 10) * 50; // Base frequency varies with text length\n\n  for (let i = 0; i < numSamples; i++) {\n    const t = i / sampleRate;\n\n    // Basic sine wave\n    let value = Math.sin(2 * Math.PI * frequency * t);\n\n    // Add harmonics for a richer sound\n    value += 0.5 * Math.sin(2 * Math.PI * frequency * 2 * t); // First harmonic\n    value += 0.25 * Math.sin(2 * Math.PI * frequency * 3 * t); // Second harmonic\n\n    // Apply amplitude envelope\n    const envelope = Math.min(1, 10 * t) * Math.min(1, 10 * (duration - t));\n    value *= envelope;\n\n    // Convert to 16-bit audio\n    view[i] = Math.floor(value * 10000);\n  }\n\n  return buffer;\n}\n\n/**\n * Send a success response\n */\nfunction sendResponse(id: string, type: string, data: any): void {\n  const response: WorkerResponse = {\n    id,\n    type,\n    data,\n  };\n\n  self.postMessage(response);\n}\n\n/**\n * Send an error response\n */\nfunction sendError(id: string, error: string): void {\n  const response: WorkerResponse = {\n    id,\n    type: \"error\",\n    error,\n  };\n\n  self.postMessage(response);\n}\n\nasync function loadTortoiseScript() {\n  try {\n    // First check if the script is already loaded\n    if (\"Tortoise\" in self) {\n      return;\n    }\n\n    // Try to load from public directory first\n    const scriptUrl = new URL(\n      \"/models/tortoise-tts/tortoise.js\",\n      self.location.origin\n    );\n    const response = await fetch(scriptUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to load Tortoise script: ${response.statusText}`);\n    }\n    const scriptText = await response.text();\n\n    // Execute the script in the worker context\n    const blob = new Blob([scriptText], { type: \"text/javascript\" });\n    const scriptObjectUrl = URL.createObjectURL(blob);\n    // @vite-ignore\n    await import(scriptObjectUrl);\n    URL.revokeObjectURL(scriptObjectUrl);\n  } catch (error) {\n    throw new Error(`Failed to load Tortoise script: ${error}`);\n  }\n}\n\n// Notify that the worker is ready\nconsole.log(\"TortoiseTTS worker initialized\");\n"],"names":["isInitialized","isBusy","mockVoices","loadVoice","language","voiceId","voiceKey","_a","resolve","event","id","type","data","handleInitialize","handleGenerate","handleLoadVoice","handleCloneVoice","handleStop","sendError","error","sendResponse","text","config","audioData","generateMockAudio","audioClips","duration","numSamples","buffer","view","frequency","i","t","value","envelope","response"],"mappings":"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"}